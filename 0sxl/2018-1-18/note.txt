数据交互方式

表单        基本请求， 每次提交都会刷新整个页面
ajax        不刷新页面，每次只是提交部分数据，节省流量。 通过服务端设置，可以跨域
jsonp       X 支持跨域但 安全性太差
websocket   双向通信，效率比 ajax 高，支持跨域

------------------------------------------------
http, https 区别

http    普通的 http 连接， 容易被攻击。比如 dns 污染
https   secuity 传输内容被加密。比较安全

dns 污染：把域名指向错误的 ip 导致你无法访问

------------------------------------------------
http 版本

http 1.0        一次性连接
http 1.1.0      增加特性：保持连接。为了提升性能，不要每次都断开，等一段时间 没有请求了在断开
http 2.0(草案)
1.强制https
2.自带双向通信（websocket 将会被取代）
3.多路复用（相当于 stream, pipe）

------------------------------------------------
http 协议  rfc 文件（https://tools.ietf.org/html/rfc2616）

------------------------------------------------

OSI 七层"参考"模型
1. 物理层       通信工程： 材料， 电流， 电压， 光强
2. 链路层       内网寻址    ARP, ICMP (ping ip地址)
3. 网络层       外网寻址    IP 
4. 传输层       通信稳定性  CTP
5. 表现层       X 统一各种网络的结构 （被传输层取代）
6. 会话层       X 记录状态 （试试证明作用不大）
7. 应用层       应用细节    http, ftp

无层模型
1. 物理层
2. 链路层
3. 网络层
4. 传输层
5. 应用层

------------------------------------------------

TCP 传输控制协议 （应用场景： 文件下载， 聊天）

1. 保证到达
2. 保证质量
3. 保证顺序

UDP 用户数据报协议 （应用场景： 直播 ip 电话）

1. 不保证到达
2. 不保证质量
3. 不保证顺序

------------------------------------------------
1.三次握手
    1. client -> server (我可以访问你么)
    2. client <- server (可以)
    3. client -> server (我这次请求的内容是 ... )
2.http 消息（头， body）
------------------------------------------------

XMLHttpRequest

浏览器请求api对象，默认支持异步。虽然也有同步的写法 （xhr.open(method, url, true)） 但是几乎用不到。

使用方法
```
    var xhr = new XMLHttpRequest();
    xhr.open()  //创建连接
    xhr.send()  //发送数据
    xhr.onreadystatechange = function () {
        //每次请求状态改变
    }
    
    xhr.readystatus  // 每个阶段 http 请求的状态
        0   初始化 new XMLHttpRequest();
        1   已连接
        2   已发送
        3   接收 header 部分
        4   接收 body 部分
    
    xhr.status 状态码
        状态码 必须在 200 到 300 之间 或者 === 304 
            其他的值都是失败
```

------------------------------------------------
http 状态码

1xx 消息
2xx 成功
3xx 重定向? 当前路径没有你想要的，你应该去别的地方找（输入baidu.com  结构浏览器定位到 https://www.baidu.com）
    301     永久重定向 浏览器下次不再访问老地址，直接访问重定向后的地址
    302     临时重定向 浏览器下次还会访问老地址，然后在跳转到新地址
    304     根据修改时间来让浏览器知道 是否是读本地缓存还是 读服务器内容

4xx 请求错误（客户端）
5xx 服务器内部错误（服务端）
6xx 可以自定义
------------------------------------------------

重定向  服务端告诉浏览器，让它访问其他的连接。地址栏改变

转发    在服务端的内部，完成转发。地址栏不变。用户无感