数据交互：
1.表单          最基本、最简单     http数据请求其实都是表单
2.ajax          不用刷新；ajax可以跨域
3.jsonp         跨域；安全性太差

4.WebSocket     快、双向、跨域


ajax          性能低、单向、跨域麻烦
websocket     性能高、双向(双工)、直接跨域

ajax单向
ws双向

--------------------------------------------------------------------------------

跨域：
www.baidu.com/a.html    ->      www.360.cn/1.txt

XSS




必须：
1.360buy.com、jd.com；t.sina.cn、weibo.com
2.第三方数据


1.表单
2.ajax——麻烦、安全
3.jsonp——简单、有风险   ×
4.ws

--------------------------------------------------------------------------------

1.http协议
2.原生JS

--------------------------------------------------------------------------------

http协议

--------------------------------------------------------------------------------

http                  容易被攻击
https   security      安全

--------------------------------------------------------------------------------

http1.0         一次性连接
http1.1         保持连接      性能提升
http2.0(草案)
1.强制https
2.自带双向通信
3.多路复用

--------------------------------------------------------------------------------

http协议
https://tools.ietf.org/html/rfc2616

--------------------------------------------------------------------------------

1.三次握手
2.http消息(头、体)

--------------------------------------------------------------------------------

OSI七层交换“参考”模型：
1.物理层           物理学家、通信工程——材料、电压
2.链路层           内网寻址       ARP、ICMP
3.网络层           外网寻址       IP
4.传输层           通信稳定性     TCP
5.表现层           × 统一各个网络结构
6.会话层           × 记录状态
7.应用层           应用细节       HTTP、FTP、SMTP、POP3

五层模型：
1.物理层
2.链路层
3.网络层
4.传输层
5.应用层

--------------------------------------------------------------------------------

TCP——传输控制协议    文件下载、聊天
1.保证到达
2.保证质量
3.保证顺序

UDP——用户数据报协议  对质量没有绝对要求、对延迟有很高要求      IP电话、视频直播
1.不保证到达
2.不保证质量
3.不保证顺序

--------------------------------------------------------------------------------

无状态通信：

--------------------------------------------------------------------------------

“对于服务器来说，区分不出来到底是form还是ajax还是jsonp”

--------------------------------------------------------------------------------

表单：
1.属性
  action      提交到哪儿
  method      方式——GET、POST；PUT、HEADER、DELETE；自定义
  name        必须加、可以重复
  submit按钮  提交

2.数据提交方法
  GET         数据放在url里面
    1.容量有限
    2.看得见(表单)
    3.有缓存

  POST        数组放在http-body里面
    1.容量很大
    2.看不见
    3.不缓存

  GET、POST安全性完全一样；https才是真安全


  GET：容量小、看得见、有缓存；利于分享、收藏
  POST：容量大、看不见、不缓存；没法分享、收藏

3.校验

--------------------------------------------------------------------------------

ajax：
1.浏览器
2.服务器

--------------------------------------------------------------------------------

ajax内部怎么写的：
异步——并行  一堆一块进行
同步——串行  一个个来，前一个操作没完事，后面等着

--------------------------------------------------------------------------------

ajax3.html:21 [Deprecation] Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https://xhr.spec.whatwg.org/.

--------------------------------------------------------------------------------

on ready state change   当通信状态变化
当 准备   状态  改变

--------------------------------------------------------------------------------

0   初始化——刚刚创建
1   已连接
2   已发送
3   已接收-头
4   已接收-body

--------------------------------------------------------------------------------

http状态码：数字
1xx     消息
2xx     成功
3xx     重定向？
  301   永久重定向——浏览器永远不会再次请求老的地址
  302   临时重定向——浏览器下次还会请求老地址

  304   缓存

4xx     请求错误(客户端)
5xx     服务端错误
6xx

--------------------------------------------------------------------------------

xhr.responseText    文本
xhr.responseXML     XML数据

--------------------------------------------------------------------------------

xml -> html

let json={name: '小明', age: 25, job: '前端开发'};

<person>
  <name>小明</name>
  <age>25</age>
  <job>前端开发</job>
</person>

xml.getElementsByTagName('name')[0]

--------------------------------------------------------------------------------

1.原生ajax怎么写——xhr对象
2.哪些步骤
3.通信状态——0~4
4.通信结果——http状态码
  1xx
  2xx成功
  3xx重定向；304成功
  4xx浏览器错了
  5xx服务器错了
  6xx扩展状态码

--------------------------------------------------------------------------------

ajax完成——封装、缓存(?)、POST
jsonp
ajax跨域——CORS跨域
formData——Ajax 2.0

--------------------------------------------------------------------------------

WebSocket、Nodejs

--------------------------------------------------------------------------------

重定向   给浏览器下命令，让浏览器去请求另一个地址————地址变的
转发     在服务器内部，把请求转交给另一个模块处理；对客户端是不可见的————地址不变

--------------------------------------------------------------------------------
